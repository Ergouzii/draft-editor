{"version":3,"sources":["Components/StyleButton.js","Components/MyEditor.js","serviceWorker.js","index.js"],"names":["StyleButton","props","onToggle","e","preventDefault","style","className","this","active","onMouseDown","label","React","Component","MyEditor","state","editorState","EditorState","createEmpty","onChange","setState","handleKeyCommand","bind","focus","refs","editor","onTab","_onTab","toggleBlockType","type","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","blockType","inlineStyle","onClick","placeholder","ref","spellCheck","blockStyleFn","getBlockStyle","block","getType","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","map","key","has","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getCurrentContent","getBlockForKey","getStartKey","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fef232c1.chunk.js","sourcesContent":["import React from 'react';\nimport '../Stylesheets/StyleButton.css';\n\nclass StyleButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = (e) => {\n            e.preventDefault();\n            this.props.onToggle(this.props.style);\n        };\n    }\n    render() {\n        let className = 'editor-styleButton';\n        if (this.props.active) {\n            className += ' editor-activeStyleButton';\n        }\n        return (\n            <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n        );\n    }\n}\n\nexport default StyleButton;\n","import React from 'react';\nimport {Editor, EditorState, RichUtils} from 'draft-js';\nimport StyleButton from './StyleButton.js';\nimport '../Stylesheets/MyEditor.css';\n\n// References:\n// draft.js official docs: https://draftjs.org/docs\n// Learn DraftJS: https://learn-draftjs.now.sh\n\nclass MyEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {editorState: EditorState.createEmpty()}; // init empty EditorState\n        this.onChange = (editorState) => this.setState({editorState});\n        this.handleKeyCommand = this.handleKeyCommand.bind(this);\n        this.focus = () => this.refs.editor.focus();\n        this.onTab = (e) => this._onTab(e);\n        this.toggleBlockType = (type) => this._toggleBlockType(type);\n        this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\n    }\n\n    // handle key commands via the handleKeyCommand prop, and hook these into RichUtils\n    // to apply or remove the desired style.\n    handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return 'handled';\n        }\n        return 'not-handled';\n    }\n\n    _onTab(e) {\n        const maxDepth = 4;\n        this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n    }\n\n    _toggleBlockType(blockType) {\n        this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n    }\n\n    _toggleInlineStyle(inlineStyle) {\n        this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={'editor-container'}>\n                    <div className={'editor-controls'}>\n                        <InlineStyleControls\n                            editorState={this.state.editorState}\n                            onToggle={this.toggleInlineStyle}\n                        />\n                        <BlockStyleControls\n                            editorState={this.state.editorState}\n                            onToggle={this.toggleBlockType}\n                        />\n                    </div>\n                    <div onClick={this.focus}>\n                        <Editor\n                            onChange={this.onChange}\n                            handleKeyCommand={this.handleKeyCommand}\n                            placeholder={'Write something:'}\n                            editorState={this.state.editorState}\n                            onTab={this.onTab}\n                            ref={'editor'}\n                            spellCheck={true}\n                            blockStyleFn={getBlockStyle}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getBlockStyle(block) {\n    if (block.getType() === 'blockquote') {\n        return 'editor-blockquote'; // give blockquote a custom style\n    } else {\n        return null;\n    }\n}\n\nconst INLINE_STYLES = [\n    {\n        label: 'Bold',\n        style: 'BOLD'\n    }, {\n        label: 'Italic',\n        style: 'ITALIC'\n    }, {\n        label: 'Underline',\n        style: 'UNDERLINE'\n    }\n];\n\nconst InlineStyleControls = (props) => {\n    let currentStyle = props.editorState.getCurrentInlineStyle();\n    return (\n        <div className=\"editor-inlineStyleControls\">\n            {INLINE_STYLES.map(\n                type => <StyleButton\n                    key={type.label}\n                    active={currentStyle.has(type.style)}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nconst BLOCK_TYPES = [\n    {\n        label: 'H1',\n        style: 'header-one'\n    }, {\n        label: 'H2',\n        style: 'header-two'\n    }, {\n        label: 'H3',\n        style: 'header-three'\n    }, {\n        label: 'H4',\n        style: 'header-four'\n    }, {\n        label: 'H5',\n        style: 'header-five'\n    }, {\n        label: 'H6',\n        style: 'header-six'\n    }, {\n        label: 'Blockquote',\n        style: 'blockquote'\n    }, {\n        label: 'UL',\n        style: 'unordered-list-item'\n    }, {\n        label: 'OL',\n        style: 'ordered-list-item'\n    }\n];\n\nconst BlockStyleControls = (props) => {\n    const {editorState} = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n    return (\n        <div className=\"editor-blockStyleControls\">\n            {BLOCK_TYPES.map(\n                (type) => <StyleButton\n                    key={type.label}\n                    active={type.style === blockType}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default MyEditor;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Stylesheets/index.css';\nimport MyEditor from './Components/MyEditor.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MyEditor />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}